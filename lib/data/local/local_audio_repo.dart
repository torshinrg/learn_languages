// lib/data/local/local_audio_repo.dart
import 'package:sqflite/sqflite.dart';
import '../../domain/entities/audio_link.dart';
import '../../domain/repositories/i_audio_repository.dart';
import '../../core/app_language.dart';

class LocalAudioRepository implements IAudioRepository {
  final Database db;
  LocalAudioRepository(this.db);

  @override
  Future<List<AudioLink>> fetchForSentence(
    String sentenceId,
    String languageCode,
  ) async {
    // Determine table based on language code
    final lang = AppLanguageExtension.fromCode(languageCode);
    if (lang == null) {
      print('‚ö†Ô∏è [LocalAudioRepo] Unsupported languageCode="$languageCode"');
      return [];
    }
    final table = '${lang.name}_audio';

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    print(
        'üîç [LocalAudioRepo] fetchForSentence sentenceId=$sentenceId table=$table');

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    final rows = await db.query(
      table,
      where: 'sentence_id = ?',
      whereArgs: [sentenceId],
    );
    // –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    print('üîç [LocalAudioRepo] rows.length=${rows.length}, rows=$rows');
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—É—â–Ω–æ—Å—Ç–∏
    final result = rows.map((r) => AudioLink.fromMap(r)).toList();
    // –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
    print('üîç [LocalAudioRepo] parsed AudioLink objects: $result');
    return result;
  }
}